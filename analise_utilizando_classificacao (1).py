# -*- coding: utf-8 -*-
"""Analise utilizando Classificacao.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1lfmpkblhb2lAfQUU69ydZJYmPiWPKU6A
"""

import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.tree import DecisionTreeClassifier, plot_tree
from sklearn.model_selection import train_test_split
from sklearn.metrics import accuracy_score

# Carregar o dataset
df = pd.read_csv('vendas.csv')

# Corrigir caracteres para UTF-8 (se necessário)
df = df.apply(lambda x: x.astype(str).str.encode('utf-8', 'ignore').str.decode('utf-8'))

# Corrigir valores com vírgula incorreta nos atributos numéricos
df['Quantidade'] = df['Quantidade'].str.replace(',', '.').astype(float)
df['Valor'] = df['Valor'].str.replace(',', '.').astype(float)

# Descartar os atributos id_Cliente e numero_fatura
df.drop(columns=['id_Cliente', 'numero_fatura'], inplace=True)

# Converter data_fatura para tipo data
df['data_fatura'] = pd.to_datetime(df['data_fatura'])

# Dropar os valores nulos (se houver)
df.dropna(inplace=True)

# Exemplo de criação de uma Decision Tree
X = df[['Quantidade', 'Valor']]
y = df['País']

# Divisão em conjunto de treino e teste
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Instanciar e treinar a Decision Tree
tree = DecisionTreeClassifier(random_state=42)
tree.fit(X_train, y_train)

# Verificar acurácia
y_pred = tree.predict(X_test)
accuracy = accuracy_score(y_test, y_pred)
print(f'Acurácia da Decision Tree: {accuracy}')

# Plotar a árvore de decisão
plt.figure(figsize=(15, 10))
plot_tree(tree, filled=True, feature_names=X.columns, class_names=tree.classes_)
plt.title('Decision Tree para Classificação por País')
plt.show()